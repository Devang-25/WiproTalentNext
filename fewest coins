2. Fewest Coins
An online coin dealer offers bags of coins that are guaranteed to contain at least one full set. Given a string comprised of lowercase letters in the range ascii[a-z], where each letter represents a coin type, determine the length of the shortest substring that contains at least one of each type of coin.

 

Example:

coins = dabbcabcd

 

The list of all characters in the string is [a, b, c, d]. 

Two of the substrings that contain all letters are dabbc and abcd.

The shortest substring that contains all of the letters is 4 characters long.

 
Function Description

 

Complete the function fewestCoins in the editor below.

 

fewestCoins has the following parameter:

   string coins:  a string

Return

    int: the length of the shortest substring that contains at least one of each characters in coins

Constraints

1 ≤ size of coins ≤ 105
each coins[i] is in the set ascii[a-z]
 

Input Format For Custom Testing
The first line contains a string, coins.

Sample Case 0
Sample Input For Custom Testing

STDIN       Function
-----       --------    
bab    →    coins = 'bab'
Sample Output

2
Explanation

"ba" is a substring that contains all the characters in coins.

Sample Case 1
Sample Input For Custom Testing

STDIN                     Function
-----                     --------
asdfkjeghfalawefhaef →    coins = 'asdfkjeghfalawefhaef'
Sample Output

13
Explanation

 

The 11 distinct characters in coins are [a, d, e, f, g, h, j, k, l, s, w]. The shortest substring with all of the characters is 13 characters long: sdfkjeghfalaw.












import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'fewestCoins' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING coins as parameter.
     */

    public static int fewestCoins(String coins) {
    // Write your code here
    int n = coins.length();
    int max = frequency(coins, n);
    int min = n;
    for(int i=0; i<n;i++){
        for(int j=0; j<n;j++){
            String sub = null;
            if(i<j){
                sub = coins.substring(i,j);
            }
            else{
                sub = coins.substring(j,i);                
            }
            int subl = sub.length();
            int subf = frequency(sub, subl);
            if(subl < min && max == subf){
                min = subl;
            }
        }
    }
    return min;
    }
    static int frequency(String coins, int n){
        int count[] = new int[10000];
        for(int i = 0; i < n; i++){
            int c = coins.charAt(i);
            count[c]++;
        }
        int max = 0;
        for(int i = 0; i < 100; i++){
            if(count[i]!=0){
                max++;
            }
        }
    return max;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String coins = bufferedReader.readLine();

        int result = Result.fewestCoins(coins);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}

