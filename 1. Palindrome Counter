A palindrome is a string that reads the same from the left and from the right.  For example, mom and tacocat are palindromes, as are any single-character strings.  Given a string, determine the number of its substrings that are palindromes. 

Example

The string is s = 'tacocat'.  Palindromic substrings are ['t', 'a', 'c', 'o', 'c', 'a', 't', 'coc', 'acoca', 'tacocat'].  There are 10 palindromic substrings.

Function Description

Complete the countPalindromes function in the editor.

countPalindromes has the following parameter:

    string s: the string to analyze

Returns:

    int: an integer that represents the number of palindromic substrings in the given string

Constraints

1 ≤ |s| ≤ 5 × 103
each character of s, s[i] ∈ {'a'-'z'}.

Input Format For Custom Testing
The first line contains a string, s.

Sample Case 0
Sample Input

STDIN     Function
-----     -----
aaa    →  s = 'aaa'

Sample Output

6

Explanation

There are 6 possible substrings of s: {'a', 'a', 'a', 'aa', 'aa', 'aaa'}. All of them are palindromes, so return 6.

Sample Case 1
Sample Input

STDIN      Function
-----      -----
abccba  →  s = 'abccba'

Sample Output

9

Explanation

There are 21 possible substrings of s, the following 9 of which are palindromes: {'a', 'a', 'b', 'b', 'c', 'c', 'cc', 'bccb', 'abccba'}.

Sample Case 2
Sample Input

STDIN     Function
-----     -----
daata  →  s = 'daata'

Sample Output

7
 
Explanation

There are 15 possible substrings of s, the following 7 of which are palindromes: {'a', 'a', 'a', 'aa', 'ata', 'd', 't'}.






import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'countPalindromes' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */

    public static int countPalindromes(String s) {
    // Write your code here
    int len = s.length();
    int output = 0;
    for (int center = 0; center <= 2*len-1; ++center) {
        int left = center / 2;
        int right = left + center % 2;
        while (left >= 0 && right < len && s.charAt(left) == s.charAt(right)) {
            output++;
            left--;
            right++;
        }
    }
    return output;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        int result = Result.countPalindromes(s);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
